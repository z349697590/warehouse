len(prompt): [53, 104, 162, 209, 265, 344, 384, 442, 486]

method1 互信息：将prompt按词切分，一个句子被切分成了多个词，根据每个词的词向量加和然后取平均值，将均值和答案的词向量计算互信息
[5.298317366548037, 5.298317366548037, 5.298317366548037, 5.298317366548037, 5.298317366548037, 5.298317366548037, 5.298317366548037,\
 5.298317366548037, 5.298317366548037]

method2 余弦相似度：将prompt按词切分，一个句子被切分成了多个词，根据每个词的词向量加和然后取平均值，将均值和答案的词向量计算余弦值
[0.5720185041427612, 0.5598502159118652, 0.4423336982727051, 0.2084808349609375, 0.7849441766738892, -0.08538198471069336, 0.38845109939575195,\
 -0.041286468505859375, 0.03179478645324707]

method3 jaccard_similarity：定义为两个集合的交集大小除以两个集合的并集大小。在这个框架下，可以将一个句子看作是一个词的集合，然后计算它与包含"苹果"的集合相似度。
[0.0, 0.0, 0.0, 0.012048192771084338, 0.0, 0.007692307692307693, 0.007194244604316547, 0.00641025641025641, 0.006024096385542169]

method4 TF-IDF：字词的重要性随着它在文件中出现的次数成正比增加，然后将这些分数的平均值作为句子的信息量。
[array([[0.]]), array([[0.]]), array([[0.]]), array([[0.]]), array([[0.]]), array([[0.]]), array([[0.]]), array([[0.]]), array([[0.]])]

method5 Bag of Words：将文本表示为词的集合，而忽略其在文本中的位置，但保留其频率信息。它可以通过计算词频向量之间的余弦相似度来比较文本的相似性。
[array([[0.]]), array([[0.]]), array([[0.]]), array([[0.]]), array([[0.]]), array([[0.]]), array([[0.]]), array([[0.]]), array([[0.]])]

method6 词移距离（Word Mover's Distance, WMD）：使用 word2vec 词向量之间的欧氏距离来度量文档的距离。它通过寻找在文档之间移动词的最小距离来度量文档之间的相似性。
[inf, inf, inf, inf, inf, inf, inf, inf, inf]


TF-IDF Bag of Words 词移距离 可能是由于答案不在prompt里面，所以计算不出得分。越是在列表右侧，prompt越具体，越长。